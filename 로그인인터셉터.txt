찜하기 시도
auth인터셉터로 끌려감
로그인이 되어있다면 true반환
로그인이 안되있다면 찜하기 uri를 rememberPath에 저장하고
로그인 페이지로 이동됨
로그인인터셉터 pre핸들 호출됨
예기치 못한 이유로 로그인이 된 상태로 왔다면 로그인 세션을 지운다(로그아웃)
자동로그인 쿠키가 있는지 확인한다.
자동 로그인 쿠키가 있다면, 쿠키값으로 members테이블을 조회해서
값이 일치하고, 유효기간이 현재시간/now()보다 크다면
해당 member를 DTO로 받아와서 로그인 세션 생성한다.
false를 반환하고 rememberPath가 있는지 확인한다.
없다면 index페이지로 리다이렉트 시키고,
있다면 rememberPath로 리다이렉트 한다.
자동 로그인 쿠키는 있지만, DB조회에 실패했다면,
쿠키를 삭제하고 true를 반환해서 로그인페이지로 보낸다.***
컨트롤러에서 먼저 입력한 정보에 따른 결과를 모델에 저장
post핸들에서 저장값을 조회해서 로그인 처리
로그인 실패시 다시 로그인 페이지로 돌려보낸다.
성공시 로그인 처리(세션 생성)
만약 자동로그인 체크를 했다면
uuid로 랜덤한 자동로그인 code 생성
자동 로그인 쿠키 생성 + 쿠키값 DB저장(값은 uuid로 생성된 code)
자동로그인 유효기간은 로그인 인터셉터의 멤버변수(상수)로 선언되어있다.
로그인 처리가 완료됬다면 rememberPath가 있는지 확인한다.
없다면 인덱스페이지로 리다이렉트, 따로해주지 않으면 컨트롤러가 반환하는 view로 이동
있다면  rememberPath로 리다이렉트 한다.

로그인이 된 상태로 찜하기 시도로 왔다,
auth인터셉터가 가로채가지만, 로그인이 되어있으니 true반환
여기서 이제 로그인한 멤버가 해당 페이지 권한이 있냐 없냐를
조건을 주고 권한이 없다면 index로 되돌려보낸다.

*** 자동로그인 쿠키 생성시 DB에 저장되는 유효기간과 쿠키의 유효기간이 동일하기 때문에
없어도 실 사용엔 문제가 없을듯 하다. 예외상황을 고려

rememberPath는 로그아웃시 삭제되도록 처리.
---------------------------------------------------
로그인이 필요한 기능은 servlet_context.xml 에서
authInterceptor에 매핑을 추가하면 됩니다.
---------------------------------------------------
