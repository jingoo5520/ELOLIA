<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.mappers.orderMapper">

	<select id="selectProductInfo" parameterType="list" resultType="com.finalProject.model.order.OrderProductDTO">
	    <foreach item="item" index="index" collection="list" separator="UNION ALL">
	        select p.*, i.image_main_url, #{item.quantity} AS quantity
	        from products p inner join product_images i 
	        on p.product_no = i.product_no 
	        where p.product_no = #{item.productNo} and i.image_sub_url = 'M'
	    </foreach>
	</select>

	<select id="selectMemberInfo" resultType="com.finalProject.model.order.OrderMemberDTO">
		select m.member_id, m.member_name, m.phone_number, m.email, m.address, m.member_point,
			   d.delivery_address, d.delivery_name, 
			   l.level_name, l.level_dc, l.level_point 
			   from members m 
			   inner join levels l on l.level_no = m.member_level 
			   left join delivery_addrs d on d.member_id = m.member_id and d.is_main = 'M'
			   where m.member_id = #{memberId}
	</select>
	
	<delete id="deleteOrder">
		delete from orders
		where order_id = #{order_id}
	</delete>
	
	<delete id="deleteProductsOfUncompletedOrder">
		delete from order_products
		where order_id in (
			select order_id from orders o
			where o.orderer_id = #{ordererId} and (
				o.payment_module_key is null or
				not exists (select 1 from payments p where o.order_id = p.order_id)
			)
		)
	</delete>
	
	<delete id="deleteUncompletedOrder">
		delete from orders 
		where orderer_Id = #{ordererId} and ( 
				payment_module_key is null or
				not exists (select 1 from payments p where orders.order_id = p.order_id) 
			)
	</delete>
	
	<select id="getPrice" resultType="int">
		select
			case
				when product_dc_type = 'P'
				then cast((product_price - (1 - dc_rate)) as signed)
				when product_dc_type = 'N'
				then product_price
				when product_dc_type is null
				then product_price
			end
		from products
		where product_no = #{productNo}
	</select>
	
	<!-- 회원용 주문 테이블 만들기 -->
	<!-- TODO : 쿠폰을 사용하지 않았다고 가정, 수정 필요함, level_dc_amount도 계산 안함, 철회 가능도 그냥 "Y"로 함. -->
	<insert id="makeOrderByMember">
		insert into orders (
			order_id, orderer_id, coupon_no,
		    level_dc_rate, level_dc_amount, use_point, 
		    withdraw_possible, order_delivery,
		    order_status, order_request
		) select #{orderId}, #{request.ordererId}, null,
			l.level_dc, 0, #{request.pointDC},
			"Y", #{request.deliveryAddress},
			1, #{request.deliveryRequest}
			from members m
			left join levels l on m.member_level = l.level_no <!-- members에 데이터가 있으면  -->
			where m.member_id = #{request.ordererId}
<!-- //		public class PaymentRequestDTO {
//			private List<OrderRequestDTO> productsInfo; // 상품번호 + 수량 정보 리스트
//			private int totalPrice; // 총 예상 결제 금액
//		    private String paymentType; // 결제 방법
//		    private String saveDeliveryType; // 배송지 저장 구분
//		    private String deliveryName; // 배송지 이름
//		    private String deliveryAddress; // 배송지 주소
//		    private String deliveryRequest; // 배송 요청사항
//		    private String ordererId; // 주문자 ID
//		    private String ordererName; // 주문자 이름
//		    private String phoneNumber; // 주문자 전화번호
//		    private String email; // 주문자 이메일
//		    private int pointDC; // 사용 포인트
//		    private String couponUse; // 사용 쿠폰코드
//		} -->
	</insert>
	
	<!-- 비회원용 주문 테이블 만들기 -->
	<insert id="makeOrderByNonMember">
		insert into orders (
			order_id, orderer_id,
		    withdraw_possible, order_delivery,
		    order_status, order_request
		) values (
			#{orderId}, #{request.ordererId},
			'Y', #{request.deliveryAddress},
			1, #{request.deliveryRequest}
		)
	</insert>
	
	<insert id="insertGuest">
		insert into guests (guest_id, guest_name, guest_email, guest_phone_number)
		select orderer_id, #{request.ordererName}, #{request.email}, #{request.phoneNumber}
		from orders where order_id = #{orderId}
	</insert>
	
	<!-- working -->
	<insert id="insertOrderProduct">
		insert into order_products (order_id, product_no, product_dc_rate, product_dc_amount, order_count, product_price)
		<foreach collection="productInfoList" separator=" UNION ALL " item="product">
		select
			#{orderId},
			#{product.product_no},
			case
				when product_dc_type = 'P'
				then dc_rate
				when product_dc_type = 'N' or product_dc_type is null
				then 0.0
			end,
			case
				when product_dc_type = 'P'
				then cast((dc_rate * product_price) as signed)
				when product_dc_type = 'N' or product_dc_type is null
				then 0
			end,
			#{product.order_count}, 
			product_price
		from products
		where product_no = #{product.product_no}
		</foreach>
	</insert>
	

	<!-- 멤버 아이디로 오더 아이디 얻어오기 -->
	<select id="selectUncompletedOrderId" resultType="String">
		select order_id from orders where orderer_id = #{memberId} and payment_module_key is null
	</select>
	
	<!-- 오더 아이디로 예상 결제금액 얻어오기 -->
	<select id="selectExpectedTotalPrice" resultType="int">
		select total_price_expected from orders where order_id = #{orderId}
	</select>
	
	<!-- 예상 결제금액 저장하기 -->
	<update id="updateExpectedTotalPrice">
		update orders set total_price_expected = #{amount} where order_id = #{orderId}
	</update>
	
	<!-- 결제모듈 키 저장하기(결제취소 등에 쓰임) -->
	<update id="updatePaymentModuleKey">
		update orders set payment_module_key = #{key} where order_id = #{orderId}
	</update>
	
	<select id="selectPaymentModuleKey" resultType="String">
		select payment_module_key from orders where order_id = #{orderId}
	</select>
	
	<select id="selectCouponNoOfOrder" resultType="int">
		select coupon_no from orders where order_id = #{orderId}
	</select>
	
	<select id="selectDeliveryCost" resultType="int">
		select deliver_cost from orders where order_id = #{orderId}
	</select>
	
	<insert id="insertToCouponUsed">
		insert into coupon_used (member_id, coupon_code) values(
			(select orderer_id from orders where order_id = #{orderId}),
			(select coupon_code from coupon_paid where coupon_no = #{couponNo})
		)
	</insert>
	
	<insert id="insertToPointUsed">
		insert into point_used (member_id, use_point) values(
			(select orderer_id from orders where order_id = #{orderId}),
			(select use_point from orders where order_id = #{orderId})
		)
	</insert>
	
	<update id="subtractUserPoint">
		update members
		set member_point = member_point - (select use_point from orders where order_id = #{orderId})  
		where member_id = (select orderer_id from orders where order_id = #{orderId})
	</update>
	
	<!-- 결제에 의한 포인트 적립 -->
	<update id="addUserPoint">
		update members m
		set m.member_point = 
			m.member_point + 
			(
				(select total_price_expected from orders where order_id = #{orderId})
				* (select level_point from levels where level_no = m.member_level)
			)
		where m.member_id = (select orderer_id from orders where order_id = #{orderId})
	</update>
	
	<!-- 회원등급 업데이트 -->
 	<update id="updateUserLevel">
 		<![CDATA[
 		update members m
		set m.member_level = 
			(
				select l.level_no
				from levels l
				where m.member_price >= l.level_min and m.member_price < l.level_max	
			)
		where m.member_id = (select orderer_id from orders where order_id = #{orderId})
		]]>
	</update>
	
	<!-- 결제정보 저장 -->
	<insert id="insertPaymentInfo">
		insert into payments (order_id, payment_status, payment_method, total_price, deposit_name, deposit_bank, deposit_account) 
		values (#{orderId}, #{status}, #{moduleName}, #{amount}, #{depositName}, #{depositBank}, #{depositAccount});
	</insert>
	
	<select id="selectOrderId" resultType="String">
		select order_id from orders where orderer_id = #{memberId}
	</select>
	
	<select id="selectProductList" resultType="com.finalProject.model.order.OrderProductDTO">
		select p.product_no, p.product_name, pi.image_main_url 
		from order_products o
		join products p on p.product_no = o.product_no
		join product_images pi on (pi.product_no = p.product_no and pi.image_sub_url = 'M')
		where o.order_id = #{orderId}
	</select>
	
	<resultMap id="OrderInfoMap" type="java.util.Map">
	    <result property="order_id" column="order_id" javaType="java.lang.String"/>
	    <result property="order_date" column="order_date" javaType="java.sql.Timestamp"/>
	    <result property="order_status" column="order_status" javaType="java.lang.String" />
	</resultMap>
	
	<select id="selectOrderInfo" resultMap="OrderInfoMap">
		select order_id, order_date, order_status from orders where order_id = #{orderId}
	</select>
</mapper>