<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.mappers.reviewMapper">
   <!-- 쿼리문 -->
<!--    리뷰 작성되지 않은 배송 완료 상품 -->
    <select id="selectCountWritableReviews" parameterType="String" resultType="int">
		select count(*)
		from order_products op
		join orders o on o.order_id = op.order_id
		where o.orderer_id = #{orderer_id}
		and o.order_status = '6'
		and not exists (
		    select 1
		    from reviews r
		    where r.product_no = op.product_no and r.member_id = #{member_id}
		);

    </select>
    
	<!-- 특정 회원이 주문한 배송완료된 상품 중 리뷰 작성하지 않은 상품을 조회 -->
	<select id="selectWritableReviews" parameterType="map" resultType="ReviewDTO">
		select 
		    op.*, 
		    p.product_name, 
		    pi.image_url,
		    o.delivered_date
		from 
		    order_products op
		join 
		    orders o on o.order_id = op.order_id
		join 
		    products p on op.product_no = p.product_no
		left join 
		    product_images pi on p.product_no = pi.product_no and pi.image_type = 'M'
		left join 
		    reviews r on r.product_no = op.product_no and r.member_id = #{member_id}
		where 
		    o.orderer_id = #{member_id}
		    and o.order_status = '6'
		    and not exists (
		        select 1 
		        from reviews r
		        where r.product_no = op.product_no and r.member_id = #{member_id}
		    )
		limit 
		    #{pagingInfo.startRowIndex}, #{pagingInfo.pageSize}
	</select>
<!-- 작성한 리뷰 개수 -->
	<select id="selectCountWrittenReviews" parameterType="string" resultType="int">
	    SELECT COUNT(*)
	    FROM reviews
	    WHERE member_id = #{member_id}
	</select>

	<select id="selectWrittenReviews" parameterType="map" resultType="ReviewDTO">
		select 
		    r.*, 
		    p.product_name, 
		    pi.image_url, 
		    r.review_score, 
		    r.register_date
		from 
		    reviews r
		join 
		    products p on r.product_no = p.product_no
		left join 
		    product_images pi on p.product_no = pi.product_no and pi.image_type = 'M'
		where 
		    r.member_id = #{member_id}
		order by 
		    r.register_date desc
		limit 
		    #{pagingInfo.startRowIndex}, #{pagingInfo.pageSize};
	</select>

	<!-- 리뷰테이블 삽입 -->
	<insert id="insertReview" parameterType="ReviewDTO" useGeneratedKeys="true" keyProperty="review_no">
	    INSERT INTO reviews (product_no, member_id, review_title, review_content, review_score, register_date)
	    VALUES (#{product_no}, #{member_id}, #{review_title}, #{review_content}, #{review_score}, NOW())
	</insert>

	<!-- 리뷰테이블 이미지 삽입 -->
	<insert id="insertReviewImages" parameterType="list">
	    INSERT INTO review_images (review_no, image_url)
	    VALUES
	    <foreach collection="list" item="image" separator=",">
	        (#{image.review_no}, #{image.image_url})
	    </foreach>
	</insert>



	<!-- 상품 이미지 가져오는 쿼리 -->
	<select id="findImageUrlByProductNo" parameterType="int" resultType="String">
	    SELECT image_url FROM product_images WHERE product_no = #{product_no} AND image_type = 'M'
	</select>

<!-- 리뷰 상세페이지 기본 조회 -->
	<select id="selectReviewDetail" parameterType="int" resultType="ReviewDetailDTO">
	select
    r.review_no, 
    r.member_id, 
    r.review_title, 
    r.register_date, 
    r.review_score, 
    r.review_content, 
    p.product_name, 
    p.product_no,
    pi.image_url as product_image_url
from 
    reviews r
join 
    products p on r.product_no = p.product_no
left join 
    product_images pi on r.product_no = pi.product_no and pi.image_type = 'M'
where 
    r.review_no = #{review_no};
	</select>

    
<select id="selectReviewImages" parameterType="int" resultType="string">
    select 
        ri.image_url as review_image_url
    from 
        review_images ri
    where 
        ri.review_no = #{review_no}
</select>

    <!-- 관리자 답글 여부 확인 쿼리 -->
    <select id="checkAdminReply" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM reviews
        WHERE review_ref = #{review_no} AND review_type = 'reply'
    </select>

    <!-- 리뷰 업데이트 쿼리 -->
    <update id="updateReview" parameterType="ReviewDTO">
        UPDATE reviews
        SET review_title = #{review_title},
            review_content = #{review_content},
            review_score = #{review_score}
        WHERE review_no = #{review_no}
    </update>

    <!-- 리뷰 이미지 삭제 쿼리 -->
    <delete id="deleteReviewImage" parameterType="String">
        DELETE FROM review_images
        WHERE image_url = #{image_url}
    </delete>

    <!-- 리뷰 이미지 추가 (수정 시) 쿼리 -->
    <insert id="insertReviewImage" parameterType="ReviewDTO">
        INSERT INTO review_images (review_no, image_url)
        VALUES (#{review_no}, #{image_url})
    </insert>
    
<select id="selectExistFileList" parameterType="int" resultType="String">
    SELECT image_url
    FROM review_images
    WHERE review_no = #{reviewNo}
</select>

    <!-- 특정 리뷰 번호에 해당하는 이미지 URL 목록 조회 -->
    <select id="getReviewImageUrlsByReviewNo" parameterType="int" resultType="String">
        SELECT image_url 
        FROM review_images 
        WHERE review_no = #{review_no}
    </select>

    <!-- 특정 리뷰 번호에 해당하는 모든 리뷰 이미지 정보 삭제 -->
    <delete id="deleteReviewImagesByReviewNo" parameterType="int">
        DELETE FROM review_images 
        WHERE review_no = #{review_no}
    </delete>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="int">
        DELETE FROM reviews 
        WHERE review_no = #{review_no}
    </delete>
<!--     적립포인트 업데이트 -->
    <update id="giveReviewPoint" parameterType="PointEarnedDTO">
    UPDATE members
    SET member_point = member_point + (SELECT point_amount FROM point_infos WHERE point_code = #{point_code})
    WHERE member_id = #{member_id};
</update>

<!-- 적립내역저장 -->
<insert id="insertPointEarned" parameterType="PointEarnedDTO">
    INSERT INTO point_earned (member_id, point_code, earned_point, point_earned_date)
    VALUES (#{member_id}, #{point_code}, #{earned_point}, NOW());
</insert>

</mapper>